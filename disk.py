""" This module is part of GMF tool

    A set of functions that compute the magnetic field produced by a 
    galactic disk dynamo.
    
    All the functions receive a dictionary of parameters as input.
    The parameters are:
           'D'      -> the dyanamo number
           'Ralpha' -> 
           'Rgamma' -> The size of the disk
           'Cn'     -> N-array containing the coefficients
           'h'      -> the maximum height to be probed
    
    This will later be refactored to support a 'galaxy magnetic field' object,
    which will mostly behave as a numpy array, but supporting changing of 
    coordinate system and containing generation/modification class methods.
"""

from scipy.special import j0, j1, jv, jn_zeros
import numpy as N
from scipy.integrate import nquad
sqrt = N.sqrt
pi = N.pi
arctan2 = N.arctan2
cos = N.cos
sin = N.sin

B_norm = dict()

def get_B_disk_cyl_unnormalized(r, phi, z, kn, p):
    """ Computes the n component of the magnetic field produced  by a
        dynamo at a galactic disc. In cylindrical coordinates.
        Input:
            r,phi,z: cylindrical coordinatees (either scalar or
                     NxNxN-arrays generated by numpy.meshgrid)
            p: dictionary containing the parameters Ralpha and D
        Output:
            Br, Bphi, Bz: repectively the radial, azimuthal and
            vertical components of the computed field (format
            compatible with r,phi,z).
    """
    
    # Unpacks the parameters
    Ralpha = p['Ralpha']
    D =  p['D'] 
    
    # Computes the radial component
    Br = Ralpha*j1(kn*r) * (cos(pi*z/2.0) \
                                    +(3*cos(3*pi*z/2.0))/(4*pi**1.5*sqrt(-D)))

    # Computes the azimuthal component
    Bphi = -2*j1(kn*r) * sqrt(-D/pi)*cos(pi*z/2.0)

    # Computes the vertical component
    Bz = -2 * Ralpha/pi * (j1(kn*r)+0.5*kn*r*(j0(kn*r)-jv(2,kn*r))) *(
         sin(pi*z/2.0)+sin(3*pi*z/2.0)/(4*pi**1.5*sqrt(-D)))

    return Br, Bphi, Bz

def __intregrand_compute_normalization(r, phi, z, kn, p):
    """ Private helper function for compute_normalization """
    Br, Bphi, Bz = get_B_disk_cyl_unnormalized(r,phi,z,kn,p)
    return r * Br*Br + Bphi*Bphi + Bz*Bz

def compute_normalization(kn, p):
    """ Renormalizes the magnetic field 
        Input:
            kn:
            p: 
        Ouptput:
            normalization factor
    """

    # Sets integration intervals
    r_range = [ 0, p['Rgamma'] ]
    phi_range = [ -pi/2.0, pi/2.0 ]
    z_range = [ -p['h'], p['h'] ]
    # Integrates
    tmp = nquad(__intregrand_compute_normalization,
                [r_range, phi_range,z_range], args=(kn,p))
    
    return tmp[0]**(-0.5)


def get_B_disk_cyl_component(r,phi,z,kn, p):
    """ Returns vector containing one _normalized_ component of the magnetic 
        field produced  by a dynamo at a galactic disc. In cylindrical
        coordinates.
        Input: position vector with (r, phi, z) coordinates, the mode kn and 
        the parameters dictionary, containing R_\alpha and the Dynamo number.
    """
    global B_norm
    
    # The normalization factors are _cached_ in the B_norm global 
    # dictionary to allow faster re-execution
    if kn not in B_norm:
        B_norm[kn] = compute_normalization(kn, p)

    Br, Bphi, Bz = get_B_disk_cyl_unnormalized(r,phi,z,kn,p)

    return B_norm[kn]*Br, B_norm[kn]*Bphi, B_norm[kn]*Bz


def get_B_disk_cyl(r,phi,z, p):
    """ Computes the magnetic field associated with a disk galaxy
        Input:
            x,y,z: NxNxN arrays containing the cartesian coordinates
            p: dictionary containing the parameters (see module doc)
        Output:
            Bx, By, Bz: NxNxN arrays containing the components of the
                        disk magnetic field
    """
    Cns = p['Cn']
    number_of_bessel = Cns.size
    mu_n =  jn_zeros(1, number_of_bessel)
    kns = mu_n/p['Rgamma']
    
    for i, (kn, Cn) in enumerate(zip(kns,Cns)):
        if i==0:
            Br=0; Bphi=0; Bz=0
            
        Br_tmp, Bphi_tmp, Bz_tmp = Cn*get_B_disk_cyl_component(r,phi,z, kn,p)
        
        Br+=Br_tmp; Bz+=Bz_tmp; Bphi+=Bphi_tmp
        
    return Br, Bphi, Bz

    
def get_B_disk(x,y,z, p):
    """ Computes the magnetic field associated with a disk galaxy
        Input:
            x,y,z: NxNxN arrays containing the cartesian coordinates
            p: dictionary containing the parameters (see module doc)
        Output:
            Bx, By, Bz: NxNxN arrays containing the components of the
                        disk magnetic field
    """

    # Cylindrical coordinates
    r = sqrt(x**2+y**2)
    phi = arctan2(y,x)  # Chooses the quadrant correctly!
                        # -pi < phi < pi
    
    # Computes the field
    Br, Bphi, Bz = get_B_disk_cyl(r,phi,z, p)
    
    # Converts back to cartesian coordinates
    sin_phi = y/r # this is probably more accurate than using phi
    cos_phi = x/r # idem
    Bx = (Br*cos_phi - Bphi*sin_phi)/(i+1.0)
    By = (Br*sin_phi + Bphi*cos_phi)/(i+1.0)
    Bz = Bz/(i+1.0)

    return Bx, By, Bz    

